% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/gcd.R
\name{gcd}
\alias{gcd}
\title{Distance between two points by Haversine, Spherical Law of Cosines, or Vincenty inverse formula}
\usage{
gcd(long1, lat1, long2, lat2, algorithm = "hf")
}
\arguments{
\item{long1}{longitude(s) in radians, vector of one or more numbers}

\item{lat1}{latitude(s) in radians, vector of one or more numbers}

\item{long2}{longitude(s) in radians, vector of one or more numbers}

\item{lat2}{latitude(s) in radians, vector of one or more numbers}

\item{algorithm}{Character string "hf" for Haversine by default, or "slc" for Spherical Law of Cosines
(and may add "vif" for Vincenty inverse formula but that is not implemented here)}
}
\value{
Distance in kilometers
}
\description{
Calculates the geodesic distance between two points (or multiple pairs of points) specified by degrees (DD) latitude/longitude using
Haversine formula (hf), Spherical Law of Cosines (slc) and Vincenty inverse formula for ellipsoids (vif)
Taken from \url{http://www.r-bloggers.com/great-circle-distance-calculations-in-r/}
Note these are not the most accurate method for long distances (e.g., >1000 km) nor the fastest.
}
\details{
long1 and lat1 must be same length. long2 and lat1 must be same length.
  All four must be the same length, defining pairs of points.
  Alternatively long1 and lat1 can define a single point while long2 and lat2 define a series of points, or vice versa.
  Taken from \url{http://www.r-bloggers.com/great-circle-distance-calculations-in-r/}
  but use \code{\link{pmin}} instead of \code{\link{min}} to vectorize it to handle at least pairs.
}
\seealso{
\code{\link{convert}}, \code{\link{gcd}}, \code{\link{get.distances}}, \code{\link{get.distances.all}}
}

