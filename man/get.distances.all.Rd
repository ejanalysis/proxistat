% Generated by roxygen2 (4.1.0): do not edit by hand
% Please edit documentation in R/get.distances.all.R
\name{get.distances.all}
\alias{get.distances.all}
\title{Find distances between points.}
\usage{
get.distances.all(frompoints, topoints, return.units = "miles",
  return.crosstab = FALSE, return.rownums = TRUE, return.latlons = TRUE)
}
\arguments{
\item{frompoints}{A matrix or data.frame with two cols, 'lat' and 'lon' with datum=WGS84 assumed.}

\item{topoints}{A matrix or data.frame with two cols, 'lat' and 'lon' with datum=WGS84 assumed.}

\item{return.units}{A string that is 'miles' by default, or 'km' for kilometers,
specifying units for distances returned.}

\item{return.crosstab}{Logical value, FALSE by default. If TRUE, value returned is a matrix of the distances,
with a row per frompoint and col per topoint.}

\item{return.rownums}{Logical value, TRUE by default. If TRUE, value returned also includes two extra columns:
a col of index numbers starting at 1 specifying the frompoint and a similar col specifying the topoint.}

\item{return.latlons}{Logical value, TRUE by default. If TRUE, value returned also includes four extra columns,
showing fromlat, fromlon, tolat, tolon.}
}
\value{
By default, returns a matrix that has 3 columns: fromrow, torow, distance
  (where fromrow or torow is the row number of the corresponding input, starting at 1).
}
\description{
\code{get.distances.all} returns all the distances from one set of points to another set of points.
}
\details{
This function returns a matrix or vector of distances,
from each of the first set of points to each of the second set of points,
where points are specified using latitude and longitude.
Relies on the sp package for the spDists() and SpatialPoints() functions.
}
\examples{
test.from <- structure(list(fromlat = c(38.9567309094, 38.9507043428),
 fromlon = c(-77.0896572305, -77.0896199948)),
 .Names = c("lat", "lon"), row.names = c("6054762", "6054764"), class = "data.frame")
test.to <- structure(list(tolat = c(38.9575019287, 38.9507043428, 38.9514152435),
 tolon = c(-77.0892818598, -77.0896199948, -77.0972395245)),
 .Names = c("lat", "lon"), class = "data.frame", row.names = c("6054762", "6054763", "6054764"))
get.distances.all(test.from, test.to)
get.distances.all(test.from, test.to, return.crosstab=TRUE)
get.distances.all(test.from, test.to, return.rownums=FALSE)
get.distances.all(test.from, test.to, return.latlons=FALSE)
}
\seealso{
\code{\link{get.distances}} for get.distances() which allows you to specify a search radius and
  get distances only within that radius which can be faster,
  \code{\link{get.distances.prepaired}} for finding distances when data are already formatted as pairs of points,
  \code{\link{get.nearest}} for get.nearest() which finds the distance to the single nearest point
  within a specified search radius instead of all topoints, and
  \code{\link{proxistat}} which calculates a proximity score for each spatial unit
  based on distances to nearby points.
}
\concept{
proximity
}

